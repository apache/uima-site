<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->
<document>

<properties>
<title>Doing an Apache UIMA Release</title>
<author email="dev@uima.apache.org">Apache UIMA Documentation Team</author>
</properties>

<body>

<section name="Doing an Apache UIMA&#0153; Release">
  
<p class="note">These instructions are for the 2.3.1 and later releases, as a top level project.
A previous version of this page, with the methods we used while in the incubator, is
<a href="release-before-2.3.1.html">here</a>.
</p>  

<p>Once you've done it a few times, you may find the shorter
  <a href="checklist-release.html">release checklist</a> more convenient.
</p>
  
<p>
  <ul>
    <li><a href="#Overview">Overview of releasing</a></li>
		<li><a href="#Release Discussions - Release Plan">Release Discussions - Release Plan</a></li>
    <li><a href="#Preparing the Jira for the Release">Preparing the Jira for the Release</a></li>
		<li><a href="#Preparing The Sourcecode For The Release">Preparing The Sourcecode For The Release</a></li>
		<li><a href="#Including updates to the Build tooling">Including updates to the Build tooling</a></li>
		<li><a href="#Building The Release Candidate">Building The Release Candidate</a></li>
    <li><a href="#Tips for the Release Manager">Tips for the Release Manager</a></li>
    <li><a href="#Removing -SNAPSHOT dependencies">Removing -SNAPSHOT dependencies</a></li>
		<li><a href="#Doing The Release Vote">Doing The Release Vote</a></li>
    <li><a href="#Releasing">Releasing</a></li>
    <li><a href="#Announce The Release">Announce The Release</a></li>     
      </ul>
</p>

<br></br>

  <subsection name="Release Overview">
    <p>
    The UIMA project mainly releases:
    <ul><li>The UIMA SDK</li>
      <li>UIMA-AS add-on</li>
      <li>Individual Annotators, tooling, and other useful components (like the Simple Server)</li></ul>
    In addition, it releases some Maven build tooling components that 
    need to be in the Maven repositories to support our Maven processes.
    </p>
    
    <p>
      Releases show up in the Maven central repository and/or 
      as downloadable artifacts listed on our downloads pages.
    </p>
    
  </subsection>

	<subsection name='Release Discussions - Release Plan'>
		<p>
		  At the beginning of the "UIMA Release Process" there must be consensus in the developer community 
		  about the JIRA issues that should be part of the next release and the time frame for the release. 
		  The result of this discussion should be published in a release plan to the UIMA wiki, if it is
      complex. 
		  This release plan should be kept up-to-date any time so that everybody can have a look at the target dates 
		  to calculate personal ToDos.
		</p>
		<p>  
		  The previous UIMA release plans and a release plan template are available in the UIMA wiki at
		  <a href="http://cwiki.apache.org/UIMA/release-plan.html">http://cwiki.apache.org/UIMA/release-plan.html</a>
		</p> 
	</subsection>
	
  <subsection name='Preparing the Jira for the Release'>
    <p>
      The build includes a generated set of Jira issues fixed (closed or resolved) in this release.
      To make this accurate, go through the Jiras and ensure the ones you are including in the release
      are closed/resolved, and that the "Fixed in release xxx" is set for each Jira issue that is part of the
      release.
    </p>
    
    <p>
      There is a saved "filter" you can adjust for this that will display all fixed Jira issues with no Fixed in release xxx
      assigned.  You can go through subsets of this (use the filter to pick the subset you want)
      and do "bulk Jira changes" to update multiples of these in parallel, if that makes sense.
    </p>
  </subsection>
  
	<subsection name='Preparing The Sourcecode For The Release'>
		<p>
		  Before the source code can be tagged for the release check the points in the list below:
		</p>
		<p>
		  <ul>
        <li>Investigate versions of things using <br/><br/>
          <code>mvn versions:display-dependency-updates<br/>
          mvn versions:display-plugin-updates and<br/>
          mvn versions:display-property-updates</code><br/><br/>
          Use this information to update to later versions, if appropriate.</li>
		    <li>
		      Make sure that each release artifact that should be released has the correct version number.
          These are normally updated automatically when the previous release is done.
          <!--
          There is an ant build script you can run here: <code>uimaj-distr/src/main/build/changeVersion.xml</code>.
          To run it, first edit the file versions.properties in the same ... / build directory, setting 
          the "previous" version (the current version info in the source), and the "new" version that it 
          should be set to.  Then, <code>cd</code>
          to <code>uimaj-distr/src/main/build</code> and do <code>ant changeVersion.xml</code> to run it. 
          It checks the following places for correct versions.
		      <ul>
			      <li>uimaj project: POM.xml</li>
			      <li>uimaj child projects: check version for the parent POM</li>
			      <li>uimaj plugin projects (uimaj-ep-...): MANIFEST.MF</li>
			      <li>uimaj-core project: UIMAFramework_impl.java</li>
			      <li>uimaj-dist project: ReleaseNotes and Readme files</li>
			      <li>uima-docbooks project: common_book_info.xml and index.html</li>
            <li>uimaj Eclipse features</li>
			  </ul>
          Some of these things it doesn't update (if the update is complicated); in these case, 
          it will instead, issue a reminder message to you
          to update things manually. -->
		    </li>
		    <li>
		      Make sure that any README files have been updated with the latest release information 
          and release numbers.
		    </li>
		    <li>
		      Update the release notes for the release.
		       <!-- JIRA can provide a list of 
		      issues for a certain release when using the 'ReleaseNotes' function, 
          after you've closed the Jira issues to be released with this version. -->
		    </li>
		    <li>Edit the POM of the top level thing being released, to add the property:
		    <pre>&lt;jiraVersion>123456&lt;/jiraVersion></pre>
		    replacing the 123456 with the actual Jira internal version number 
		        (or numbers, separated by a comma) for the Jira release(s) being
		        done.  This value is used during release processing to automatically 
		        generate a report of the list of Jira issues that are included in this release.
		        Change "123456" to be the actual jira internal version number, which you can get 
            from the Jira url (see parameter fixfor=xxxxxx or fixforversion=xxxxxx) 
            by going to https://issues.apache.org/jira/browse/UIMA 
            and selecting "Releases" or "Versions" and then going to the 
            particular version and looking in the url for
            that version.
          <p>
		        You can also generate this report manually (for instance, if you want to
		        have a look at what it will produce) by going to top level project
		        being released (e.g., uimaj-distr) and issuing the maven command:
		        <pre>mvn changes:jira-report -N </pre></p>
		        
		         <p>Each time this plugin is run, it creates an updated report in the
		            top level of this project.  This report doesn't need to be checked into SVN.
		            It will be regenerated and copied into the distribution archives (source and binary)
		            during a release.  The RELEASE_NOTES.html files have been updated to
		            refer to this generated report.</p>
		         <p>Running the mvn release... command will cause this report to be generated or
		            updated, every time the command is run.  So it is important that the POM 
		            is updated to include the internal Jira version number, so the 
		            right report is generated.</p>
		        </li>
 		  </ul>
		</p>
	</subsection>
	
	<subsection name="Including updates to the Build tooling">
	<p>This step is skipped, unless the build tooling is being updated.</p>
	<p>There are two projects in the build tooling, each having as a parent, the common Apache Parent POM
	<b>uima-build-resources</b> and <b>parent-pom</b>.
	  The following special procedure is used to release updates to these.
	</p>
	<p>
	  The parent-pom has the uima-build-resources's version number encoded as the 
	  "property" <pre>&lt;uimaBuildResourcesVersion>XXXXXX&lt;/uimaBuildResourcesVersion></pre>
	  This value will normally be set to the last released version number of the uima-build-resources artifact.
	</p>
	<p>If that artifact is changing, during development, this will be set to the XX-SNAPSHOT value corresponding to 
	   the development version.  When releasing, first do a release (to the Nexus Staging repository, as usual) of
	   the uima-build-resources artifact, which will create a version without the -SNAPSHOT.  Then change the
	   &lt;uimaBuildResourcesVersion> value to correspond to the non-SNAPSHOT version number of this, before
	   proceeding to release the parent-pom artifact.</p>	
	</subsection>
	
	<subsection name='Building The Release Candidate'>
    <p class="note">Prior to releasing, you must do the 
      <a href="one-time-release-setup.html">one-time setup</a>
      required for releasing
    </p>
		<p>
      We use the maven-release-plugin to do the releasing.  In the prepare phase, it updates the
      trunk artifacts to remove the -SNAPSHOT suffix, commits it to trunk, and then does an
      SVN copy of the trunk to create the tag.  Then it updates the trunk artifacts to the next
      version-SNAPSHOT, and commits that.
    </p>
      
    <p>The release:perform checks out the tag and builds/tests/installs and deploys it to the 
      NEXUS staging repository.
    </p>
      
    <p>During this process, the release plugin asks what the next levels should be and what the tag name 
        should be, and unless there's a good reason, we take the defaults (by just hitting enter).
        The exception to this is in naming the SVN TAG - normally we have "release candidates".
        The recommended convention is to take the suggested name and add "-rc1" for release candidate 1,
        etc.
    </p>
    <p>The release plugin automatically signs everything that needs signing using gpg.  It also
      builds the sources.jar, and one overall (for multi-module projects) source-release.zip file, 
      which can be later obtained and 
      should be a copy of the SVN tag for that artifact, and once unzipped, should be buildable,
      using <code>mvn install</code>.
    </p>
    
    <p>Steps:
    <ul>
           <li>Make sure all changes are checked into SVN.  Then check out from SVN the project(s)
        you'll be building, into a new "build" location, and do all the building from there.</li>
        <li>Purge your local maven repository of artifacts being built by running in the 
        top level directory you'll be building from:
        <br/><br/>
          <code>mvn dependency:purge-local-repository</code><br/><br/>
          Note that this will immediately re-resolve the dependencies from the maven repositories
          you have configured. 
        </li>
        
        <li>
          Do a trial build of the release candidate:
          <pre>cd **directory for doing the release** 
mvn install -Papache-release</pre>
          <p>The <code>-Papache-release</code> is used to have the build mimic the 
             build actions that would be taken when the release plugin is running
             the release build.</p>
        </li>
        <li><code>mvn release:prepare -DautoVersionSubmodules</code>
        <ul><li>take the defaults for the questions, except add -rcN (e.g. -rc1) for the 
        name of the svn tag - to allow for multiple release candidates</li></ul>
        </li>
        <li><code>mvn release:perform</code></li>
    </ul> 
    </p>
    
    
    
    <p>Normally, everything built is uploaded to the Nexus Staging repository.  However, for the 
    (large) distribution objects, such as the source and binary distributions for UIMA Java SDK etc.,
    the "deploy" step is skipped.  These artifacts, instead of being "distributed" using the
    Maven central repository, are distributed using the Apache Mirroring System.</p>
      
    <p>You can upload to the Nexus Staging repository several independent artifacts; they will
        all get added to the same unique temporary staging repository Nexus creates.  Once all the
        artifacts are in place, you log into 
        <a target="_blank" 
          href="https://repository.apache.org">https://repository.apache.org</a> using your 
          LDAP credentials, go to your staging repository, and "close" the repository.  After that,
          nothing more can be added.  If you deploy another artifact, it will create a new 
          staging repository.</p>
    <p class="note"><b>If you forget to close the repo</b>, it will be open when you do your next 
    release candidate, and then you'll have in the repo both release candidates, (with
    later files overwriting newer), which if any file names have changed, will <b>create
    a mess.  So be sure to <code><b>close</b></code> (and <code><b>drop</b></code> as appropriate) any previous repo</b> before starting a release:perform for a new
    release candidate, so they deploy into a "fresh" empty staging repo.</p>
          
    <p>If you have several artifacts to release, and you want subsequent artifacts to 
        depend on the released versions of earlier ones, you can do this, by releasing the 
        first one, then releasing subsequent ones that depend on that, etc.  This works because
        the first one you release will get built with the release version and installed to your
        local repository, as well as the Nexus staging repository.  So subsequent ones that depend on
        the release version of previous ones, will find that in your local repository.  
        </p>  
        
        <p>
          If you forget something and close the staging repository too soon, just continue as if you hadn't.
          Subsequent release artifacts will go into another newly created staging spot on Nexus.
          The downside of this is that you'll have to tell the "voters" about multiple staging repos.
        </p>
        
	</subsection>
  
  <subsection name='Tips for the Release Manager'>
    <p>
      The release is done using the commands <code>mvn release:prepare</code> and <code>mvn release:perform</code>.
    </p>
    <p><b><u>Having all submodules at the same version:</u></b> 
      When releasing a multi-module project where all the submodules have the same release version as the 
      root project (e.g., uimaj-distr), you can have the release plugin set the version for all the submodules
      the same value as the root, automatically, just use this form of the release:prepare:
      <pre>mvn release:prepare -DautoVersionSubmodules</pre>
    </p>
    <p>
      <b><u>Trying out the release build:</u></b> You can build the artifacts that the release would build by using:
      <pre>mvn package -Papache-release</pre>
    </p>
    <p>
      <b><u>Re-doing release candidates:</u></b> There are two ways to reset things back so you can do
      another release candidate; depending on how far through the release process you've progressed.
    </p>
    <p style="margin-left:3em"><code>[mvn release:prepare]</code> If you've just done release:prepare,
    you can reset things back to as they were before that command by issuing
    <code>mvn release:rollback</code>.  Check to confirm that the svn tag for the
    release candidate is deleted; if not, remove it manually.
    </p>
    <p style="margin-left:3em"><code>[mvn release:perform]</code> If you've done a release:perform, to
    reset the source, try doing the release:rollback; this may work if you haven't done a release:clean.
    </p>
    
    <p style="margin-left:3em">Otherwise, 
    you have to change the &lt;version>x.y.z-SNAPSHOT> back to their previous value.
    You can use Eclipse's search/replace to do this, or the mvn versions plugin.
    </p>
    
    <p style="margin-left:3em">If you've 
    "closed" the Nexus repo - you have to drop it.  If you haven't, you can just re-run the 
    release:perform when you're ready, and that will overwrite the staging repo data in Nexus.  But see
    the next tip.
    </p>
    <p>
      <b><u>Nexus staging repositories and your source computer</u></b> The staging repo that 
      receives the output of <code>mvn release:perform</code> has as part of its name, the
      IP address where the deploy comes from.  If you have a laptop, and do part of the release
      at "work", and then another part at "home", the IP address will be different, and 
      multiple staging repositories will be created. This is not a problem, usually, unless
      you are <i>updating</i> a release by redoing it, and are expecting the previous version
      to be overwritten.  In case it isn't, you can just use the Nexus command line interface
      to delete the old version from the "other" staging repo.
    </p>
  </subsection>
	
  <subsection name='Removing -SNAPSHOT dependencies'>
    <p>
      POMs can refer to other artifacts in several ways, for example via the &lt;parent-pom>
      element, or via a &lt;dependency> element.  Often, a release will involve releasing together
      multiple modules (all at -SNAPSHOT levels) that refer to one another using these elements.
      When that happens, the references in these two elements are automatically updated
      during the release process, from xx-SNAPSHOT to xx for the tag, and then to the next development level,
      for the trunk.  
    </p>
    
    <p>Exception to this: -SNAPSHOT suffixes are not updated for references within plugins.</p>
  </subsection>

  <subsection name="Stage the (partial) eclipse-update-site">
      <ul>
      <li>Build the Eclipse update site, after the corresponding jars have been staged 
      with their final release numbers to the staging repo:
      <ul>
        <li>Edit the site.xml to include any new features, with the final release numbers.</li>
        
        <!--li>Copy from the approved release candidate any new feature Jars to the <code>features</code> directory.</li>
        (Note this step and the next are automatically done by the build 
        <li>Copy from the approved release candidate any new plugin Jars to the <code>plugins</code> directory, after
        first deleting any Jars that might be there from previous releases.</li>
        -->
        
        <li>run <code>mvn package</code> on the uimaj-eclipse-update-site project
        to pack the new plugin Jars, and generate the new site digest containing
        the new features.</li>
        
        <li>run the signEclipseUpdateSite.sh script to sign the new Jars and zip files the build script created.
        This script can be run on linux or on windows, but on windows, you need to run it inside Cygwin.  When you install
        Cygwin, indicate that it should fixup the windows line ending characters; otherwise the script may not run.</li>
        
        <li>Test the result: try using the new site (as a local site) in various versions of Eclipse, and verify it installs OK.
        If there are errors, correct these and rebuild.</li>
        
        <li>SVN commit any changes you did to the trunk.  
        In particular, the uimaj-eclipse-update-site project's <code>features</code>
        directory, containing any new Feature Jars, is committed, 
        so future site builds have access to this information.
        The <code>plugins</code> directory content is <b>not</b> committed, 
        because the site build process does not 
        require the plugin information.</li>
        
      </ul>
      </li>
      </ul>
  </subsection>  
	
  <subsection name='Doing The Release Vote'>
    <p>The release candidate typically consists of 
      <ul><li>assembly source and binary distributions,</li>
          <li>the associated SVN tag, and</li>
          <li>the individual Maven module artifacts.</li>
      </ul>
      </p>
      <p>
      The source and binary distributions are manually copied by the 
      release manager to the release manager's people.apache.com
      account, to make them available for review.  The Maven module artifacts
      are found in the Nexus staging repository, and are available once 
      the release manager "closes" the repository.
    </p>
		<p>
      After things are staged, you write a note to the dev list, asking for an approval vote.
      You need to provide the url(s) of the closed staging repository in the note so the approvers
      can find the code to check, the SVN tag corresponding to the release, and
      if needed, the place on people.apache.org where the source and binary
      distributions being proposed are found.  
      The [VOTE] email should be based on similar previous votes, and
      include instructions to testers on how to set up their maven settings.xml file to specify
      the particular staging repository (or repositories, if more than one is being used).
      For an example, see <a href="http://markmail.org/message/4ae7zb4ucmivlkaa">this dev-list post</a>.
      
		</p>
	</subsection>
  
	<subsection name='Releasing'>
		<p>
		  After a successful release vote for the release on the dev mailing list:
      <ol>
        
        <li>Promote the release(s) from the staging repositories: 
            log on to the staging repository again, and release the staged artifacts.  
            This will make the artifacts available in the Maven Central repository.</li>
        <li><p>Upload the release artifacts from people.apache.org to the distribution server 
      (via copying on people.apache.org
      to the directory: <code>/www/www.apache.org/dist/uima</code>, including the 
      release artifacts and the Eclipse update site data (which are merged with
      the existing previous plugin releases already on the update site).  
      Be sure to include the asc/md5/sha1 signatures.
      Make sure the KEYS file in that uploaded directory is current (master located in 
      SVN uima/site/trunk/uima-website/docs/KEYS). Additionally it is necessary to update
      the download page of the UIMA website to make the new release artifacts available.
      This is done indirectly, by editing both the downloads.xml page and also by
      adding entries to the xdocs/stylesheets/project.xml page - follow the previous examples.</p>
      </li>
      <li>Things not needed to be mirrored go into our website:
        on p.a.o, in directory www/uima.apache.org/d/
        Currently, this includes the RELEASE_NOTES (plus issuesFixed) for the release,
        the new docbooks, and the Javadocs. 
        <p class="note">
        Before, things only got to our website by being added to SVN.  Apache Infrastructure has
        set up an additional path for our project to allow large generated objects (e.g., Javadocs)
        to bypass SVN.  This works as follows:  Anything you want on our website can be put in 
        people.a.o in the directory www/uima.apache.org/d/, just by copying it there.  This location
        will be rsync'd to our website once an hour, approximately.
        </p>
        <p>
        Copy released artifacts to targets: bin, src, to p.a.o/www/www.apache.org/dist/uima, 
      new features / plugins from Eclipse update site target/eclipse-update-site to .../dist/uima/eclipse-update-site
      (add to what's already there).    
      <ul>
        <li>The Eclipse update site on w.a.o/dist/uima will have previous versions of the jars for the
        features and plugins.  The generated site in 
          <code>uimaj-eclipse-update-site/target/eclipse-update-site</code> has the new version plugin(s)
          and feature jars.  These should be added to the w.a.o/dist/uima update site - leave the others
          that are already there in place.  
          Update the Eclipse site and digest as needed.
        </li>
      </ul>
      </p>
      <li>Copy RELEASE_NOTES and issuesFixed
      from the top level project (where
      the mvn release:perform was done from) in the directory
      target/checkout/ ...  to the p.a.o/www/uima.apache.org/d/[project-version].</li>
      </li>
      
      <li>After the distribution directory on people.apache.org/www/www.apache.org/dist/uima is updated, 
      update the downloads page of the web site</li>
  <li>Update Jira version info to reflect the release status and date</li>
  <li>Rename the SVN tag for the release candidate if it ends in -rcXXX, without the -rcXX to indicate the release.</li>
  <li>After release appears on maven central, post an appropriate announce letter</li>
  <li>Add release to next Board report</li>
  </ol>    
		</p>
    
    
	</subsection>

	<subsection name='Announce The Release'>
	  <p>
	    To announce the published release send and email to
    </p>
	    <ul>
	      <li>announce@apache.org</li>
	      <li>user@uima.apache.org</li>
	    </ul>
    <p>
	    and describe the major changes of the release. 
	    Announcements should be posted from the release manager's <code>apache.org</code> address,
      and signed by the release manager using the same code-signing key as was used to sign the release.
	    For more details please refer to <a href="http://incubator.apache.org/guides/releasemanagement.html#announcements">
	    A Guide To Release Management During Incubation</a>.
	  </p>
    <p>Our main uima website has a "News" section that should be updated with news of the release.</p>
	</subsection>

</section>

</body>
</document>
