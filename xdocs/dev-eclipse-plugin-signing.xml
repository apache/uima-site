<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->
<document>

<properties>
<title>Signing Eclipse Plugins - release process</title>
<author email="dev@uima.apache.org">
 Apache UIMA Documentation Team</author>
</properties>

<body>
<section name="Overview">
<p>All released Apache artifacts are normally signed.  Eclipse plugin jar signing is in addition 
to the Apache release signing.  This additional signing (with a recognized authority certificate)
allows the plugin installer to avoid saying it is installing unsigned artifacts, and needs permission to continue.
</p>

<p>Only the plugin JARs need to be signed (to be confirmed) - that is, the Feature JARs are not signed.</p>

  <subsection name="Process Flow">
    <p>We use a 2 step process, to reduce costs to Apache for signing release candidates which subsequently fail.
       After the release vote passes, two subsequent Ant tasks are run to rebuild the update site, from the
       tag, with a manual (at this point) signing step for the Jars, inbetween them.</p>
       
    <p>The first step is to do a normal build of the update site, using mvn release:prepare.
       This produces the artifacts for voting on, without signing the
       new plugin Jars, and writes the "tag" for this into SVN for record keeping.</p>
     
     <p>After the vote passes, the prepare-to-sign ant build is run.  This rebuilds the update site, just like the
        previous build, but stops at the point of doing the JAR processing for the new plugins, where before it ran
        the Jarprocessor with the -repack and -pack options, now it runs with just the -repack options.  
        This puts the packed/conditioned JARs into target/eus-work/plugins, named x.y.z_3.0.1.jar, for example.
     </p>
     
     <p>The release manager, using their special credentials, logs onto the signing portal, and makes a signing set
       consisting of all of the Jars in target/eus-work/plugins, and signs them.  The signed Jars are down-loaded into 
       a new directory, target/eus-work-signed/plugins/. </p>
       
     <p>Now the finish-after-signing ant build is run.  This task does all the remaining steps, including Apache GPG
        signing of the artifacts.</p>
        
     <p>Please try installing the result to confirm nothing went wrong in this re-build process.</p>
       
  </subsection>
</section>

<section name="Release Manager needs to have a valid code signing certificate">
  <p>
    For the UIMA project, contact the PMC chair for aid in obtaining a code signing certificate if you need one.</p>
</section>

<section name="Release only if 1 or more changed Eclipse plugins">
  <p>If the release does not have any updates to Eclipse Plugin JARs, save Apache money by reusing previously released versions.
     If the release has 1 or more JARs, these will be signed in 1 signing event. so it doesn't matter how many Jars there are.</p>
</section>

<section name="Links to Apache resources for codesigning">
  <p>See https://reference.apache.org/pmc/codesigning for general information.
  </p>
  <p>See https://wiki.eclipse.org/JAR_Signing#What_gets_signed.3F for background on signing Eclipse Plugins.</p>
</section>

<section name="Release Flow">
<p>To be done...</p>
</section>


</body>
</document>
