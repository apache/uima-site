<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->
<document>

<properties>
<title>How we use Maven for building</title>
<author email="dev@uima.apache.org">
 UIMA Documentation Team</author>
</properties>

<body>

<p>This is developer information, mostly.  It documents how we are using Maven for
building the various parts of UIMA.</p>

<p>We are currently using the Apache common parent POM which supports deployment to
the Apache Nexus repository, for staging and release. You can see that POM 
<a href="http://repo1.maven.org/maven2/org/apache/apache/7/apache-7.pom" target="_blank">
  here</a></p>

<section name="POM Conventions">
  <p>We follow the conventions regarding the layout of the POM as specified 
    <a target="_blank" 
      href="http://maven.apache.org/developers/conventions/code.html#POM_Code_Convention">
      here</a>.</p> 
</section>

<section name="Our POM hierarchy">

<p>POMs have two kinds of hierarchy. The main one is used for factoring out common 
things and arranges POMs in a parent-child hierarchy, by having the child 
identify the parent POM.  The other kind is aggregation - POMs which specify sub-modules
for purposes of building multi-module things, and releasing them all at once.  For clarity,
we keep these two uses in separate POMs:  parent POMs do not do aggregation, 
and aggregation POMs do not do common factoring.</p>

<p>Our parent poms are kept in a folder, under a top level SCM node called "build", which holds things
  needed for building, but which are not part of normal aggregate distributions.
  Aggregation POMs are kept with the SCM node focused on those modules being aggregated.</p>
</section>    

<section name="POM style">
  <p>When writing a new POM, it is best to start with an existing POM for a similar
    kind of project, and derive the new POM from that.  Some points:
    <ul>
      <li>POMs contain a &lt;url> element.  If they don't, they will inherit from their parent
        following an assumption that the url is the parent url value followed by "/" and
        this POMs artifactId.  This may or may not be how our website is set up, so 
        it is best to just code the url that is correct for the new project.</li>
      <li>The SCM connection is needed for releasing - and needs to be accurate for this
        component.</li>
      <li>The POM's "version" is stated literally, not via a "property", etc.  Maven 3 
        will complain if you use properties here, and the release mechanism for maven
        manipulates these values (removing SNAPSHOT, incrementing things, etc.)</li>
      <li>The POM's groupId is usually omitted - in which case, it inherits from the
        parent.  Doing this is a recommended best practice.</li>      
    </ul>
    </p>
  <p>Maven 3 has more requirements on POMs
    <p>A transition to Maven 3 is occuring in 2010.  The Eclipse plugin, m2eclipse, "embeds" 
      Maven 3 already.</p>
    <ul>
      <li>Property names have to include their path from project, etc.   For instance, you cannot use
        ${version}, you have to use ${project.version}.</li>
    </ul></p>
</section>

<section name="Handling Documentation">
  <p>For each Java source artifact, the Apache standard parent POM builds and attaches a source zip and a Javadocs zip
  to the main Jar artifact.  It doesn't do any standard actions for other documentation (e.g., docbook style).</p>
  
  <p>We use Docbook style for much of our other documentation, the main exception being our website, which uses Anakia.
    Documentation is typically built using a different lifecycle in maven, called the "site" lifecycle.
    Maven supports site deployment via additional &lt;site> element in the &lt;distributionManagement> POM element;
    this is used to direct deployment to the website staging area.</p>
    
  <p>Normally, all website content is kept in SVN in the uima/site/trunk/uima-website/docs directory; this directory is
    checked out into the right spot on people.apache.org.  For large generated documents, we have the option to
    generate them from sources in svn, and deploy them directly to the right spot on people.apache.org.  This avoids
    using SVN for large generated files.  This satisfies the 
    <a href="http://apache.org/dev/project-site.html" target="_blank">requirements</a> for Apache websites.</p>
    
  <h2>Docbook Support</h2>
    <p>Most user-level documentation guides are written using 
      <a href="http://www.docbook.org/" target="_blank">Docbook</a>.  
    All docbooks are drafted using a one-docbook-per-project approach.  If you need more than one, just create
    multiple projects.  This is required because of the way maven supports inheritance.  The 
    main UIMA documentation is contained in several projects, because it consists of multiple "books".
    </p>
    
    <p style="padding-left: 2em">Docbooks are usually included in projects that produce other artifacts, e.g., Jars.  Or,
      they can be in projects which only produce a docbook (in which case, the maven packaging type
      should be set to "pom").</p>
    
    <p>Docbooks can hyperlink to each other.  This linking includes the ability to reference details 
      about the other link, for instance, what "page" (for PDF rendering formats) the link is on.
      To make this work, the docbook tool pipeline needs to keep a central database for all docbooks
      that want to provide this information.  When a docbook is processed, this information is updated,
      and is then available when other docbooks are processed.
      </p>
    <p>In our implementation, projects make their olink information available by having that file
      (which is produced or updated as a side effect of running the docbkx maven plugin) "attached"
      to the results produced by maven for this project. 
      Other docbooks which have links to resolve copy those artifacts into a specific place in their
      build directory, using the maven dependency plugin using the dependency:unpack goal.  
    </p>
    <p>Given that docbooks are often a part of other projects, which have normal Maven install
      phases, and that docbook processing can take a long time, the docbook processing is not normally
      done with the install phase; it is normally bound to the pre-site phase.  
      It can be forced to be done when using the install phase by using "docbook" profile (
      specify -Pdocbook as a parameter on the "mvn" command line; multiple profiles are allowed 
      using the syntax -Pdocbook,otherProfile).
      </p>
    <p>Docbook processing is normally done in the pre-site phase; this processing includes 
      attaching the zipped up results (html, pdf, and olink database)
       to the set of artifacts so they can be installed or deployed.  Future assembly runs 
       use these artifacts as components within the assemblies.
    </p>  
</section>

<section name="Building Assemblies for Distribution">
  <p>The normal operation of Maven is concerned with the building of individual modules.  Each module
    when built produces maven artifacts in repositories (your local repository, or perhaps uploaded 
    to a snapshot or staging repository).</p>
  <p>When releases are done, additional artifacts are constructed using the distribution assemblies.
    The input to these are the already built artifacts in the local repository.</p>
  <h2>Distribution Pom - Clean phase</h2>
    <p>The clean phase
    of the distribution POMs includes running the dependency plugin to purge the local repository of
    dependencies, and then the aggregation pom so they will be rebuilt, with current checked-out levels.
    This is done with the "docbook" profile, so any docbooks will be rebuilt.
  </p>   
    
</section>
</body>
</document>