<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->
<document>

<properties>
<title>How we use Maven for building</title>
<author email="dev@uima.apache.org">
 UIMA Documentation Team</author>
</properties>

<body>

<section name="Maven use for Apache UIMA builds">
<p>This is developer information, mostly.  It documents how we are using Maven for
building the various parts of UIMA.</p>

<p>We follow Apache conventions for releasing Maven based projects 
  (all of ours except the 
  UIMA C++ enablement layer), using Nexus, as documented
  <a target="_blank" 
  href="http://www.apache.org/dev/publishing-maven-artifacts.html">here</a>.</p>

<p>It covers how we use Maven for building Version: 2.3.1 and onwards.</p>
  <p>A transition to Maven 3 is occurring in 2010.  Maven 3 corrects many issues, including
    one we rely on, regarding inheriting of profiles, so we pre-req Maven 3.0.
  </p>

<subsection name="Nexus">

<p>Apache runs a version of <a target="_blank" href="http://nexus.sonatype.org/">Nexus</a>, a 
  repository "manager".  Nexus has been set up to support releasing Maven artifacts.  It allows
  Maven's release plugin to think it is actually "releasing" and deploying to a Maven repository, when
  in actuality, the release configuration specifies deploying to the "staging" part of the Apache
  Nexus instance.  Once the release is verified and voted on, it can then be transferred up to 
  Maven central repository with a few clicks on the website.</p>
    
<p>We are currently using the
  <a href="http://repo2.maven.org/maven2/org/apache/apache/7/apache-7.pom" target="_blank">
  Apache common parent POM</a> 
   which supports deployment to
this Apache Nexus repository, for staging and release. You can see that POM 
<a href="http://repo1.maven.org/maven2/org/apache/apache/7/apache-7.pom" target="_blank">
  here</a>.  It also supplies many of the standard items needed for all Apache projects.</p>
</subsection>
</section>
<section name="POM Conventions">
  <p>We follow the conventions regarding the layout of the POM as specified 
    <a target="_blank" 
      href="http://maven.apache.org/developers/conventions/code.html#POM_Code_Convention">
      here</a>.</p> 
</section>

<section name="Our POM hierarchy">

<p>POMs have two kinds of hierarchy:
  <ol>
    <li>The main one is used for factoring out common 
things and arranges POMs in a parent-child hierarchy, by having the child 
identify the parent POM.
    </li>
    <li>
      The other kind is aggregation - POMs which specify sub-modules
for purposes of building multi-module things, and releasing them all at once.
    </li>
  </ol>  
  For clarity,
we mostly keep these two uses in separate POMs:  parent POMs do not do aggregation, 
and aggregation POMs do not do common factoring.</p>
<p>An exception to this is the 
parent-poms hierarchy; here, each parent-pom has a %lt;modules> section which 
lists the poms which in turn, have this pom as their parent.  This allows the
release plugin to support releasing a pom, together with all of the build parent poms that are
its children (recursively), together.  This is needed because the poms must all have their
version numbers adjusted for the release (dropping the -SNAPSHOT, etc.) which
the release plugin does.</p>

<p>Our parent poms are kept in a folder, "parent-poms", under a top level SCM node called "build", which holds things
  needed for building, but which are not part of normal uima release distributions.
  Aggregation POMs are kept within the SCM parent directory containing those modules being aggregated,
  in a "flat hierarchy" structure.</p>
  
  <subsection name="Parent Pom Hierarchy">
  <p>Parent pom names start with parent-pom-:</p>
<pre>
parent-pom-top
  
  parent-pom-docbook 
    - enables docbook processing (if docbook source is present)

    parent-pom-ibm-notice 
      - same as top but adds IBM notice        
    
    parent-pom-eclipse-plugins 
        
       parent-pom-eclipse-plugins-ibm-notice 
         - same as above but adds IBM notice
      
    parent-pom-annotator 
      - used to build PEAR packaged single-project annotators
      
    parent-pom-single-project 
      - used to build non-PEAR packaged single-project annotators
      
    parent-pom-distr 
      - used to build Binary Aggregate distributions 
        (UIMA SDK and UIMA-AS)         
</pre>
</subsection>
</section>    

<section name="POM style">
  <p>When writing a new POM, it is best to start with an existing POM for a similar
    kind of project, and derive the new POM from that.  Some points:
    <ul>
      <li><p>POMs contain a <code>&lt;url></code> element, which is supposed to 
        point to the UIMA website page for this artifact (or the main UIMA page).  
        If a POM doesn't have this element, it will inherit one from its parent
        but Maven will assume (usually incorrectly in our case) 
        that the url is the parent url value followed by "/" and
        this POMs artifactId.</p>
        
        <p>So, If this does not correspond to how the website is set up,
        please specify the url that is correct for the new project.</p>
      </li>
      <li>The SCM connection is needed for releasing - and needs to be accurate for this
        component.  The same defaulting is applied as above, which is incorrect for our
        flat layout, so each POM needs to have an explicit SCM element.</li>
      <li>The POM's "version" is stated literally, not via a "property", etc.  
        Maven 3 
        will complain if you use properties here, and the release mechanism for maven
        manipulates these values (removing SNAPSHOT, incrementing things, etc.)</li>
      <li>The POM's groupId is omitted if it's the same as the parent pom's
        (which is true for all of our projects except our top-most parent pom); 
        if omitted, it inherits from the parent.</li>
      <li>The packaging is omitted if it is "jar".</li>      
    </ul>
  </p>
  
</section>

<section name="Release artifacts">
  <p>We follow the standard release process for Maven-based artifacts at Apache,
    documented <a target="_blank" 
      href="http://www.apache.org/dev/publishing-maven-artifacts.html">here.</a></p>
  <p>For each artifact, the release process builds additional artifacts, and
     attaches them to the main one, so they will "go along with" the main artifact during 
    Maven deployment to repositories.
    <ul>
      <li>
        sources.jar - holds the source files - this is for IDEs that want to refer to the source
      </li>
      <li>
        javadoc.jar - (For Java sourced artifacts, only)
      </li>
      <li>
        source-release.zip - this is the same as the sources, but includes all other files 
        (such as the pom.xml) not under the /src
        directory, needed for building.  
        The intent is that this is the same as the SVN checked-in files, and once unzipped, this
        should be "buildable" by doing "mvn install", etc. in the unzipped directory.
      </li>
    </ul>  
    The release process happens when the command <code>mvn release:prepare</code> or 
    <code>mvn release:perform</code> is executed.  The release plugin is set up by the common
    Apache super-Pom to specify the <code>apache-release</code> profile.  It is this profile
    being selected that causes (among many other things) the sources.jar, javadoc.jar and 
    source-release.zip artifacts to be built.
  </p>
  
  <subsection name="Standard Artifacts">
  
  <p>The release process includes standard artifacts in standard places.  The Maven remote-resources-plugin
     is used to get these resources from a special a UIMA build artifact (uima-jar-resource-bundle), 
     customizing them for the particular project:
     <ul><li>The DEPENDENCIES file is generated from the transitive closure of the dependencies in the POM.</li>
         <li>The NOTICES file is augmented with additional text (we use this to add the IBM Copyright formerly
         in the files, per the Apache practice for moving these to the NOTICE file). 
         </li></ul>    
  </p>
  
  <p>These (partially) generated resources are placed in the project's target/maven-shared-archive-resources/META-INF/
     directory.  Later steps in the build use this directory for two purposes:
     <ul><li>adding this information to any JAR that might be built</li>
         <li>adding this information as part of generated assemblies - these files are copied to the top
             level (above any project).</li>
     </ul>
   </p>
   
   <p><b><u>Overriding on a per-project basis:</u></b> Files that the remote-resources-plugin obtains and places
      in the target/maven-shared-archive-resources/META-INF/ directory can be overridden
      by including identically named files at the top level of the project.
      This is commonly used for add-on projects having a different LICENSE or NOTICE file.</p>
      
   <p>Note that there are sometimes two sets of LICENSE / NOTICE files - one for the source distribution,
      and one for the binary distribution.  This is because the source distribution rarely needs other
      than the standard LICENSE/NOTICE files, for example, because it is only distributing source; while the
      binary distribution often distributes additional components that are licensed under other
      licenses, with additional NOTICE requirements - in which case, the LICENSE and NOTICE files 
      contains all of the required licenses and notices for everything
      being distributed.</p>
     
   <p style="margin-left: 3em">
   For <i>binary</i> distributions, the LICENSE and NOTICE files are taken from src/main/readme/ directory.
   </p>
   <br/><br/>
   <p>This next table summarizes the packaging artifacts and how and where they are 
      located and added during the build process.</p>
  
   <table class="downloads">

    <tr>
     <th>Artifacts</th>
     <th>Variants</th>
     <th>Sources</th>
     <th>Targets</th>
     <th>Methods</th>
    </tr>

    <tr>
     <td><p>LICENSE, NOTICE, DEPENDENCIES.</p>
     <p>Note that DEPENDENCIES are not (currently) in 
         our "binary" assembly distributions.</p></td>
     <td><p>Standard, for source distribution</p>
         <p>Alternate: has extra Notice element used for copyrights moved to Notice file.</p>
         <p>Alternate2: for binary assemblies, these are customized for each binary assembly.</p>
         </td>
     <td><p>uima-jar-resource-bundle (in the build tooling).</p> 
         <p>Additional text for NOTICE (if needed) comes from a property in the build POM,
            (currently inherited from the build poms with the name ending in -ibm-notice).</p>  
         <p>For binary assemblies, comes from either
           <ul><li>src/main/readme/, or</li>
               <li>top level (for Addons)</li>
           </ul>
         </p>
     </td>
      <!-- Targets -->     
     <td><p>Jars: goes into the MANIFEST.MF. 
         <p>Source-Release Assemblies:</p> 
         goes into the zip as top level files.</p>
         <p>Custom Binary assemblies: goes into the zip / tar as top level files.</p>
     </td>
     <!-- Method -->
     <td><p>parent-pom-top configures remote-resources plugin to copy these into
            target/maven-shared-archive-resources/META-INF/
            directory.  This info is then included in any Jars that are built.</p>
         <p>During release (only) (apache-release profile activated)
            the information in target/maven-shared-archive-resources/META-INF/
            is copied to the top level of the source-release archive.
            Any versions of these files at the project's top level
            will subsequently override these, at the top level of the archive.</p>
         <p>For binary distributions, done with -distr projects, 
            these files come from src/main/readme/.  For binary distributions,
            done using single-project parent (add-ons, typically), these files
            are copied from the top level of the project into the archive.</p></td>
    </tr>
    <tr>
      <td>README.txt</td>
      <td>source-release.zips and binary distribution releases (not in Jars)</td>
      <td><p>For -distr poms, for source distributions, these come from 
           same-named files at the top level of the -distr project.
           For binary distributions, the custom assembly specifies where these
           files come from (typically src/main/readme).
           </p>
          <p>For Addon projects, if there is a README at the top level, this 
             is copied into both the source and binary distributions, at the top level of the archive.</p>
      </td>
      <td>Goes at the top level of archive</td>
      <td>
        <p>For source release building, during release (only) (apache-release profile activated)
            parent-pom-top configures the assembly plugin for source assemblies to use
            the multimodule-source-release in uima-jar-resource-bundle.  This copies 
            the README file from the top level into the top level of the archive.
            </p>
         <p>For binary distributions, the distribution projects inherit from either
            parent-pom-distr (whose assembly copies the README from src/main/readme/) 
            or parent-pom-single-project
            (whose assembly copies the README from the top level in the project).</p>
      </td>
    </tr>

    <tr>
      <!-- artifact -->
      <td><p>RELEASE_NOTES.html</p> 
      <p>Each release can include release notes 
      describing the main changes for the release.</p></td>
      <!-- variants -->
      <td>source-release.zips for some projects and binary distribution releases (not in Jars)</td>
      <!-- Sources -->
      <td><p>For -distr poms, source for these was in src/main/readme/, but is now
             at the top level (to reduce configuration by following more conventions)</p>
          <p>For (some) Addons, there is a RELEASE_NOTES at the top level, which
             is copied into the source and binary distributions to the top level of the archive.</p>
      </td>
      <!-- Targets -->
      <td>Goes at the top level of archive</td>
      <!-- Method -->
      <td>
        <p>During release builds the assembly is configured to copy these from the top
           level of the project to the top level of the archive.
        </p>
      </td>
    </tr>
    
    <tr>
      <!-- artifact -->
      <td><p>issuesFixed</p>
      <p>Each release can include a top-level directory called issuesFixed, 
        which has a file jira-report.html</p>
        <p>This is generated
        by the release manager using a top level command when a release is being
        contemplated.</p>
        <p>It contains the set of fixed/resolved Jiras that correspond to this release.  
        </p></td>
      <!-- variants -->
      <td>none</td>
      <!-- Sources -->
      <td>This is a computed resource, computed when the top level command is run.</td>
      <!-- Targets -->
      <td>The directory goes at the top level of archive</td>
      <!-- Method -->
      <td>
        <p>A special command is run by the release manager to create or update this.
           The command is</p>
           <p><code>mvn -N -DjiraVersion=xxxxxx changes:jira-report</code></p>
           <p>
           run in the top level directory being released.  xxxxxx is the <b>internal</b>
           version id used by Jira for the particular version being released - see
           <a href="release.html">release.html</a> for how to obtain this.
        </p>
      </td>
    </tr>
   </table>
 </subsection>
</section>

<section name="Handling Documentation">
  <p>We have several kinds of documentation:</p>
  <ul>
    <li>Javadocs</li>
    <li>Docbook</li>
    <li>UIMA Website (Anakia)</li>
  </ul>
 
  <p>We use Docbook style for much of our documentation, 
    the main exception being our website, which uses Anakia.
    See the <a href="dev-docbook.html">how to use docbook</a> page for information
    about how to write Docbook style documentation, and how it is processed during building.</p>
    
  <p>Docbooks are built, if present, during the normal lifecycle.</p>
    
  <p>Javadocs are built during the release process for Java sources packaged as a Jar.  
    In addition, some distribution projects collect things from multiple projects and build 
    explicitly, larger Javadoc sets. (e.g., uimaj-distr).
  </p>
     
  <p>For the web site, documentation is kept in the SVN "site" top level directory.  Within that project,
    the sources are in the <code>xdocs</code> directory; anything there is expected to be written using Anakia
    markup, and the <code>build.xml</code> ant script is used to transform these into corresponding html 
    files in the <code>docs</code> directory.</p>
    
  <p>Normally, all website-ready content (not needing Anakia processing) 
    is kept in SVN in the <code>uima/site/trunk/uima-website/docs</code> directory; 
    this directory is manually checked out into the right spot on <code>people.apache.org</code>, the sources
    are updated.  
    For large generated documents, 
    we have the option to generate them from sources in svn, 
    and deploy them directly to the right spot on <code>people.apache.org</code>.  
    This avoids using SVN for large generated files.  This satisfies the 
    <a href="http://apache.org/dev/project-site.html" target="_blank">requirements</a>
    for Apache websites.</p>
</section>

<section name="Packaging Individual Projects">
  <p>
    The UIMA Project, in addition to the main frameworks (the UIMA SDK and the UIMA-AS addon), 
    has Annotators and other components and tools 
    (such as the SimpleServer) that it releases.  These in the past have been released as a big
    assembly we called the Sandbox, but now are are being supported as individual items.
  </p>
  
  <p>
    Two kinds of packaging for these are available, chosen by specifying one of the following parent-poms:
    <ul><li>parent-pom-annotator - this packages things as a PEAR</li>
      <li>parent-pom-single-project - this packages things as a tar / zip file having a lib/ directory
        with the generated Jar and dependencies (see below).</li></ul>
  </p>
    
  <p>
    The individual Annotators are mostly packaged as 
    <a href="http://uima.apache.org/downloads/releaseDocs/2.3.0-incubating/docs/html/references/references.html#ugr.ref.pear">
      PEAR</a> files, which are the UIMA standard for annotator component packaging and distribution.
    The Pear is generated using the PearPackagingMavenPlugin, which generates automatically a
    conventional Pear Installation Descriptor, from the information in the project.    
    The PEAR artifact is generated in addition to Jar of the code, and includes
    other items such as the generated documentation, data, and a lib/ directory with other Jars
    needed for the PEAR to operate.  This PEAR is the packaged equivalent of a binary distribution
    artifact produced for the main framework, and comes with a license and notice that
    covers any included libraries.  Generated PEARs are included in the artifacts that are managed by
    Maven, and are available in the Maven repository system.
  </p>
    
  <p class="note">
    The PEAR internal folder "src" is not used by components here; the source is instead available 
    via the standard Maven source directory conventions.
  </p>
    
  <p>
    PEARs must have a "main" descriptor, which is the one normally used to configure and run 
    the annotator.  When using the parent-pom-annotator to indicate PEAR packaging, 
    you must include a property called <code>
    &lt;pearMainDescriptor></code> in the Annotator's POM, 
    whose value is the path from the project base directory
    identifying the main descriptor.  For example, if the folder "desc" was at the root of your project, the 
    value might be something like "desc/my-main-descriptor.xml".
  </p>
  
  <p>If an annotator isn't suitable for PEAR packaging, perhaps because it is inappropriate to have 
    one pre-done main descriptor, then the annotator can be packaged as a single-project, instead, by 
    making the POM's parent parent-pom-single-project.</p>
  
  <h2>Common conventions for structuring individually releaseable projects</h2>
  <p>Use these conventions to get your annotator properly packaged when you use the parent-pom-annotator or 
    the parent-pom-single-project as your parent pom:
    <ul>
      <li>Use &lt;package>jar&lt;/package> (which is the default, so it should be omitted), if there
        is a Jar that should be built (as is usually the case).  This will cause the main
       annotator Jar to be built, including any resources (plus the top-level desc folder, if it exists), 
       as normal.</li>
      <li>Create the required License, Notice, and optional Readme, and Release Notes files 
        in the project directory at the top level; these will be included in the
        PEAR or simple project binary assembly at the top level.  
        The License and Notice files should be for the entire project, including
        all third-party Jars etc. being distributed.
        <p style="margin-left: 2em">The generated Jar, which only has Apache-developed code, 
          will have the normal Apache License and Notice files.</p></li>
      <li>Dependencies: those marked with scope "compile" (the default) or "runtime"
        are copied to the PEAR or single-project's lib/ directory.  To keep a dependency needed for compiling
        from being included in the lib/, give it a scope of "provided".
        <p class="note">You may use the dependencies <code>&lt;exclusions></code> element to control
          transitive dependencies.</p>
      </li>
    </ul>
  </p>
  
  <h2>Conventions for structuring individual projects released as PEARs</h2>
  <p>
    <ul>
      <li>Using the following folders at the top level of your project (which 
        are the folders used in the "conventional" PEAR layout, 
        causes the contents of these folders to be added to the corresponding files in the PEAR or binary zip/tar:
        <ul>
          <li>desc - for descriptiors, including the main descriptor</li>
          <li>bin - (optional) for extra executables</li>
          <li>lib - (optional) for libraries (not being included via the Maven dependencies mechanism)</li>
          <li>doc - (optional) not normally used, but can have additional user-ready documentation</li>
          <li>data - (optional) for arbitrary data</li>
          <li>resources - (optional) not normally used, but can have additional data which should be on the classpath</li>
          <li>conf - (optional) for extra configuration files</li>
          <li>src - not-used - Maven conventions for src directories are used instead</li> 
        </ul>
        <p>The following Maven conventional information will be added in the generated PEAR:
        <ul>
          <li>lib - dependencies with scope "compile" or "runtime" are resolved from maven repositories and added to the lib/</li>
          <li>doc - docbook sources under src/docbook are processed and the html and pdf forms are added</li>
          <li>Maven resources - (not the top level resources directory described above) 
            are by convention included in the Jar, and are not included in this folder</li>
        </ul>
        </p>  
      </li>
    </ul>
  </p>
</section>

<section name="Building Assemblies for Distribution">
  <p>The normal operation of Maven is concerned with the building of individual modules.  Each module
    when built produces maven artifacts in repositories (your local repository, or perhaps uploaded 
    to a snapshot or staging repository).</p>
  <p>When releases are done, additional artifacts are constructed using the distribution assemblies.
    We have these for
    <ul>
      <li>UIMA - the base Java framework</li>
      <li>UIMA-AS - the asynchronous scaleout add-on</li>
      <li>UIMA Add-ons - not decided yet, but it's likely we'll just release these as individual projects.  
        So there is no add-ons-distr project (yet).</li>
      <!--li>UIMA Add-ons - annotators and other add-on components such as the SimpleServer</li-->
      <li>UIMACPP - the C++ framework</li>
    </ul>
  </p>
     
  <!--h2>Distribution Pom - Clean phase</h2>
    <p>The clean phase of the distribution POMs includes running the dependency:purge-local-repository plugin 
    to purge the local repository of dependencies, when activated by the apache-release profiles.    
  </p-->   
    
</section>

<section name="Build resources">
  <p>During the build process, several resources are used, and are built into Maven Artifact Jars with
    Maven coordinates:
    <ul>
      <li>uima-jar-resource-bundle - this is the standard License Notice and Dependencies from the 
        Apache common parent pom, except it allows adding post-Notice text.  We use this when 
        we need to include the IBM Copyright notice, moved here from donated code from IBM.
        This also has an override for the multi-module source release assembly.</li>
      <li>uima-docbook-olink - this is the shared 
        <a target="_blank" href="dev-docbook.html#Cross Referencing among UIMA Docbooks">olink</a> data.  
        This project's source contains the 
        information about the UIMA Bookshelf - the set of books that can cross-reference each other,
        and how they're laid out (current layout - they all are subitems of one common directory).
        This artifact is not released, it always stays at 1-SNAPSHOT level, but can be deployed 
        to the snapshot repository for sharing with others.
      </li>
      <li>uima-docbook-resource-bundle - holds common information needed by docbook builds, including
        the specification for the titlepage.</li>
      <li>uima-assembly-single-project - holds the binary assembly descriptor for single-projects.</li>
    </ul></p>
    
    <p>There is also one custom Maven plugin (uima-build-helper-maven-plugin) 
      which is used to get the build month and build year into properties.
      This is used, for instance, in the common docbook frontmatter to indicate when the book was
      built.</p>
</section>


</body>
</document>