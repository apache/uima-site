<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->
<document>

<properties>
<title>Doing a UIMA Release</title>
<author email="dev@uima.apache.org">UIMA Documentation Team</author>
</properties>

<body>

<section name="Doing a UIMA Release">
  
<p class="note">These instructions are for the 2.3.1 and later releases, as a top level project.
</p>  

<p>Once you've done it a few times, you may find the shorter
  <a href="checklist-release.html">release checklist</a> more convenient.
</p>
  
<p>
  <ul>
    <li><a href="#Overview">Overview of releasing</a></li>
		<li><a href="#Release Discussions - Release Plan">Release Discussions - Release Plan</a></li>
    <li><a href="#Preparing Jira for the Release">Preparing Jira for the Release</a></li>
		<li><a href="#Preparing The Sourcecode For The Release">Preparing The Sourcecode For The Release</a></li>
		<li><a href="#Including updates to the Build tooling">Including updates to the Build tooling</a></li>
		<li><a href="#Building The Release Candidate">Building The Release Candidate</a></li>
		<li><a href="#Doing The Release Vote">Doing The Release Vote</a></li>
    <li><a href="#Ask Incubator PMC To Release">Ask Incubator PMC To Release</a></li>
    <li><a href="#Publish The Release">Publish The Release</a></li>
    <li><a href="#Announce The Release">Announce The Release</a></li>     
      </ul>
</p>

<br></br>

  <subsection name="Release Overview">
    <p>
    The UIMA project mainly releases:
    <ul><li>The UIMA SDK</li>
      <li>UIMA-AS add-on</li>
      <li>Individual Annotators, tooling, and other useful components (like the Simple Server)</li></ul>
    In addition, it releases some Maven build tooling components that 
    need to be in the Maven repositories to support our Maven processes.
    </p>
    
    <p>
      Releases show up in the Maven central repository and/or 
      as downloadable artifacts listed on our downloads pages.
    </p>
    
  </subsection>

	<subsection name='Release Discussions - Release Plan'>
		<p>
		  At the beginning of the "UIMA Release Process" there must be consensus in the developer community 
		  about the JIRA issues that should be part of the next release and the time frame for the release. 
		  The result of this discussion should be published in a release plan to the UIMA wiki, if it is
      complex. 
		  This release plan should be kept up-to-date any time so that everybody can have a look at the target dates 
		  to calculate personal ToDos.
		</p>
		<p>  
		  The previous UIMA release plans and a release plan template are available in the UIMA wiki at
		  <a href="http://cwiki.apache.org/UIMA/release-plan.html">http://cwiki.apache.org/UIMA/release-plan.html</a>
		</p> 
	</subsection>
	
  <subsection name='Preparing the Jira for the Release'>
    <p>
      In a following step, you will extract from Jira the set of issues fixed in this release.
      To make that work, go through the Jiras and insure the ones you are including in the release
      are closed, and that the "Fixed in release xxx" is set for each Jira issue that is part of the
      release.
    </p>
    
    <p>
      There is a saved "filter" you can adjust for this that will display all fixed Jira issues with no Fixed in release xxx
      assigned.  You can go through subsets of this (use the filter to pick the subset you want)
      and do "bulk Jira changes" to update multiples of these in parallel, if that makes sense.
    </p>
  </subsection>
  
	<subsection name='Preparing The Sourcecode For The Release'>
		<p>
		  Before the source code can be tagged for the release check the points in the list below:
		</p>
		<p>
		  <ul>
        <li>Investigate versions of things using <br/><br/>
          <code>mvn versions:display-dependency-updates<br/>
          mvn versions:display-plugin-updates and<br/>
          mvn versions:display-property-updates</code><br/><br/>
          Use this information to update to later versions, if appropriate.</li>
		    <li>
		      Make sure that each release artifact that should be released has the correct version number.
          These are normally updated automatically when the previous release is done.
          <!--
          There is an ant build script you can run here: <code>uimaj-distr/src/main/build/changeVersion.xml</code>.
          To run it, first edit the file versions.properties in the same ... / build directory, setting 
          the "previous" version (the current version info in the source), and the "new" version that it 
          should be set to.  Then, <code>cd</code>
          to <code>uimaj-distr/src/main/build</code> and do <code>ant changeVersion.xml</code> to run it. 
          It checks the following places for correct versions.
		      <ul>
			      <li>uimaj project: POM.xml</li>
			      <li>uimaj child projects: check version for the parent POM</li>
			      <li>uimaj plugin projects (uimaj-ep-...): MANIFEST.MF</li>
			      <li>uimaj-core project: UIMAFramework_impl.java</li>
			      <li>uimaj-dist project: ReleaseNotes and Readme files</li>
			      <li>uima-docbooks project: common_book_info.xml and index.html</li>
            <li>uimaj Eclipse features</li>
			  </ul>
          Some of these things it doesn't update (if the update is complicated); in these case, 
          it will instead, issue a reminder message to you
          to update things manually. -->
		    </li>
		    <li>
		      Make sure that any README files have been updated with the latest release information 
          and release numbers.
		    </li>
		    <li>
		      Update the release notes for the release.
		       <!-- JIRA can provide a list of 
		      issues for a certain release when using the 'ReleaseNotes' function, 
          after you've closed the Jira issues to be released with this version. -->
		    </li>
		    <li>Edit the POM of the top level thing being released, to add the property:
		    <pre>&lt;jiraVersion>123456&lt;/jiraVersion></pre>
		    replacing the 123456 with the actual Jira internal version number 
		        (or numbers, separated by a comma) for the Jira release(s) being
		        done.  This value is used during release processing to automatically 
		        generate a report of the list of Jira issues that are included in this release.
		        Change "123456" to be the actual jira internal version number, which you can get 
            from the Jira url (see parameter fixfor=xxxxxx or fixforversion=xxxxxx) 
            by going to https://issues.apache.org/jira/browse/UIMA 
            and selecting "Releases" or "Versions" and then going to the 
            particular version and looking in the url for
            that version.
          <p>
		        You can also generate this report manually (for instance, if you want to
		        have a look at what it will produce) by going to top level project
		        being released (e.g., uimaj-distr) and issuing the maven command:
		        <pre>mvn changes:jira-report -N </pre></p>
		        
		         <p>Each time this plugin is run, it creates an updated report in the
		            top level of this project.  This report doesn't need to be checked into SVN.
		            It will be regenerated and copied into the distribution archives (source and binary)
		            during a release.  The RELEASE_NOTES.html files have been updated to
		            refer to this generated report.</p>
		         <p>Running the mvn release... command will cause this report to be generated or
		            updated, every time the command is run.  So it is important that the POM 
		            is updated to include the internal Jira version number, so the 
		            right report is generated.</p>
		        </li>
        <li>
          Do a trial build of the release candidate:
          <pre>cd **directory for creating the distribution** e.g. uimaj-distr
mvn install -Papache-release</pre>
          <p>The <code>-Papache-release</code> can be used to have the build mimic the 
             build actions that would be taken when the release plugin is running
             the release build.</p>
        </li>
		  </ul>
		</p>
	</subsection>
	
	<subsection name="Including updates to the Build tooling">
	<p>This step is skipped, unless the build tooling is being updated.</p>
	<p>There are two projects in the build tooling, each having as a parent, the common Apache Parent POM
	<b>uima-build-resources</b> and <b>parent-pom</b>.
	  The following special procedure is used to release updates to these.
	</p>
	<p>
	  The parent-pom has the uima-build-resources's version number encoded as the 
	  "property" <pre>&lt;uimaBuildResourcesVersion>XXXXXX&lt;/uimaBuildResourcesVersion></pre>
	  This value will normally be set to the last released version number of the uima-build-resources artifact.
	</p>
	<p>If that artifact is changing, during development, this will be set to the XX-SNAPSHOT value corresponding to 
	   the development version.  When releasing, first do a release (to the Nexus Staging repository, as usual) of
	   the uima-build-resources artifact, which will create a version without the -SNAPSHOT.  Then change the
	   &lt;uimaBuildResourcesVersion> value to correspond to the non-SNAPSHOT version number of this, before
	   proceeding to release the parent-pom artifact.</p>	
	</subsection>
	
	<subsection name='Building The Release'>
    <p class="note">Prior to releasing, you must do the 
      <a href="one-time-release-setup.html">one-time setup</a>
      required for releasing
    </p>
		<p>
      We use the maven-release-plugin to do the releasing.  In the prepare phase, it updates the
      trunk artifacts to remove the -SNAPSHOT suffix, commits it to trunk, and then does an
      SVN copy of the trunk to create the tag.  Then it updates the trunk artifacts to the next
      version-SNAPSHOT, and commits that.
    </p>
      
    <p>The release:perform checks out the tag and builds/tests/installs and deploys it to the 
      NEXUS staging repository.
    </p>
      
    <p>During this process, the release plugin asks what the next levels should be and what the tag name 
        should be, and unless there's a good reason, we take the defaults (by just hitting enter).
    </p>
    <p>The release plugin automatically signs everything that needs signing using gpg.  It also
      builds the sources.jar, and the source-release.zip file, which can be later obtained and 
      should be a copy of the SVN tag for that artifact, and once unzipped, should be buildable,
      using <code>mvn install</code>.
    </p> 
      
    <p>You can upload to the Nexus Staging repository several independent artifacts; they will
        all get added to the same unique temporary staging repository Nexus creates.  Once all the
        artifacts are in place, you log into 
        <a target="_blank" 
          href="https://repository.apache.org">https://repository.apache.org</a> using your 
          LDAP credentials, go to your staging repository, and "close" the repository.  After that,
          nothing more can be added.  If you deploy another artifact, it will create a new 
          staging repository.</p>
          
    <p>If you have several artifacts to release, and you want subsequent artifacts to 
        depend on the released versions of earlier ones, you can do this, by releasing the 
        first one, then releasing subsequent ones that depend on that, etc.  This works because
        the first one you release will get built with the release version and installed to your
        local repository, as well as the Nexus staging repository.  So subsequent ones that depend on
        the release version of previous ones, will find that in your local repository.  
        </p>  
        
        <p>
          If you forget something and close the staging repository too soon, just continue as if you hadn't.
          Subsequent release artifacts will go into another newly created staging spot on Nexus.
        </p>
        
	</subsection>
	
  <subsection name='Removing -SNAPSHOT dependencies'>
    <p>
      POMs can refer to other artifacts in several ways, for example via the &lt;parent-pom>
      element, or via a &lt;dependency> element.  Often, a release will involve releasing together
      multiple modules (all at -SNAPSHOT levels) that refer to one another using these elements.
      When that happens, the references in these two elements are automatically updated
      during the release process, from xx-SNAPSHOT to xx for the tag, and then to the next development level,
      for the trunk.  
    </p>
  </subsection>
  
	<subsection name='Doing The Release Vote'>
		<p>
      After things are staged, you write a note to the dev list, asking for an approval vote.
      You need to provide the url(s) of the closed staging repository in the note so the approvers
      can find the code to check.  The [VOTE] email should be based on similar previous votes, and
      include instructions to testers on how to set up their maven settings.xml file to specify
      the particular staging repository (or repositories, if more than one is being used).
      For an example, see <a href="http://markmail.org/message/4ae7zb4ucmivlkaa">this dev-list post</a>.
      
		</p>
	</subsection>
  
	<subsection name='Releasing'>
		<p>
		  After a successful release vote for the release on the dev mailing list log on to the 
      staging repository again, and release the staged artifacts.  This will make the artifacts
      available in the Maven Central repository.
		</p>
	</subsection>

	<subsection name='Publish The Release'>

		<ul>
      <li>Build the Eclipse update site:
      <ul>
        <li>Edit the site.xml to include any new features.</li>
        
        <li>Copy from the approved release candidate any new feature Jars to the <code>features</code> directory.</li>
        
        <li>Copy from the approved release candidate any new plugin Jars to the <code>plugins</code> directory, after
        first deleting any Jars that might be there from previous releases.</li>
        
        <li>run the ant build script to pack the new plugin Jars, and generate the new site digest containing
        the new features.</li>
        
        <li>run the signEclipseUpdateSite.sh script to sign the new Jars and zip files the build script created.
        This script can be run on linux or on windows, but on windows, you need to run it inside Cygwin.  When you install
        Cygwin, indicate that it should fixup the windows line ending characters; otherwise the script may not run.</li>
        
        <li>Test the result: try using the new site (as a local site) in various versions of Eclipse, and verify it installs OK.
        If there are errors, correct these and rebuild.</li>
        
        <li>SVN commit any changes you did to the trunk.  In particular, the uimaj-eclipse-update-site project's <code>features</code>
        directory, containing any new Feature Jars, is committed, so future site builds have access to this information.
        The <code>plugins</code> directory content is <b>not</b> committed, because the site build process does not 
        require the plugin information.</li>
        
      </ul>
      </li>
      
		<li><p>Upload the release artifacts to the distribution server (via uploading to people.apache.org
      in the directory: <code>/www/www.apache.org/dist/uima</code>, including the 
			release artifacts and the Eclipse update site data.  Be sure to include the gpg/md5/sha1 signatures.
      Make sure the KEYS file in that uploaded directory is current. Additionally it is necessary to update
      the download page of the UIMA website to make the new release artifacts available. </p>
      <ul>
        <li>The Eclipse update site on w.a.o/dist/uima will have previous versions of the jars for the
        features and plugins.  The generated site in 
          <code>uimaj-eclipse-update-site/target/eclipse-update-site</code> has the new version plugin(s)
          and feature jars.  These should be added to the w.a.o/dist/uima update site - leave the others
          that are already there in place.  The other non-jar files should be updated from the generated site.
        </li>
      </ul>
    </li>
      
		<li><p>Update the documentation page with the new data on the UIMA website.  The mirroring stuff is
    embedded in the markup - just substitute within that markup the name of the new release
    (assuming you followed the previous release's naming conventions for the higher-level
    directories).</p></li>
            
 	</ul>
	</subsection>
	
	<subsection name='Announce The Release'>
	  <p>
	    To announce the published release send and email to
    </p>
	    <ul>
	      <li>announce@apache.org</li>
	      <li>user@uima.apache.org</li>
	    </ul>
    <p>
	    and describe the major changes of the release. 
	    Announcements should be posted from the release manager's <code>apache.org</code> address,
      and signed by the release manager using the same code-signing key as was used to sign the release.
	    For more details please refer to <a href="http://incubator.apache.org/guides/releasemanagement.html#announcements">
	    A Guide To Release Management During Incubation</a>.
	  </p>
    <p>Our main uima website has a "News" section that should be updated with news of the release.</p>
	</subsection>

</section>

</body>
</document>
